Q1.What is Spring Framework?

The Spring Framework is an open-source Java framework that provides comprehensive support for building enterprise-grade applications.
It offers a lightweight and modular approach to develop robust, scalable, and maintainable applications.
The core principle of the Spring Framework is dependency injection, which promotes loose coupling and facilitates testability and extensibility.
  
###############################################################################################################################################
Q2.What are the features of Spring Framework?

Dependency Injection: Spring enables dependency injection, allowing objects to be loosely coupled and promoting easier testing and configuration management.
Aspect-Oriented Programming (AOP): Spring provides AOP capabilities to modularize cross-cutting concerns, such as logging, security, and transaction management.
Data Access and Integration: Spring provides support for data access through JDBC, Object-Relational Mapping (ORM) frameworks like Hibernate, and integration with various data technologies like JPA, and NoSQL databases.
Transaction Management: Spring offers a consistent programming model for declarative transaction management across various transactional resources.
MVC Web Framework: Spring MVC provides a flexible and powerful model-view-controller (MVC) framework for building web applications, supporting RESTful services and server-side rendering.
Security: Spring Security provides comprehensive security features for securing applications, including authentication, authorization, and protection against common security vulnerabilities.
Testing: Spring provides testing support, including integration testing, unit testing, and mock object creation, promoting easier testing of Spring-based applications.

  
###############################################################################################################################################
Q3.What is a Spring configuration file?

A Spring configuration file is an XML or Java-based file that defines the configuration and behavior of a Spring application.
  It contains information about beans (objects managed by the Spring container), their dependencies, and various configuration settings.
  The configuration file allows developers to specify how Spring components are wired together, define aspects, configure data sources, set up security, and perform other application-specific configurations.
  
###############################################################################################################################################
Q4.What do you understand by Dependency Injection?

Dependency Injection is a design pattern and a key feature of the Spring Framework. 
  It is a mechanism by which the dependencies of an object are provided externally rather than the object itself creating and managing them. 
  In other words, the dependencies are "injected" into the object by an external entity (such as the IoC container) at runtime.
  Dependency Injection promotes loose coupling between objects, improves testability, and allows for easier maintenance and configuration.
  
###############################################################################################################################################
Q5.What do you mean by IoC Container?

In Spring, the IoC container is responsible for managing the lifecycle of objects (beans) and handling their dependencies.
  It achieves this through a process called inversion of control, where the container creates objects, injects their dependencies, and manages their lifecycle.
  The IoC container is the core component of the Spring Framework and provides features like dependency injection, aspect-oriented programming, and lifecycle management.
  
###############################################################################################################################################
Q6.Explain the difference between constructor and setter injection?

Constructor Injection:
In constructor injection, dependencies are provided through the constructor of a class.
The required dependencies are specified as parameters of the constructor, and the IoC container resolves and injects the dependencies when creating an instance of the class.
Constructor injection enforces the mandatory dependency requirement and ensures that an object is fully initialized when created. It promotes immutability and makes dependencies explicit.

Setter Injection:
In setter injection, dependencies are provided through setter methods of a class.
The class exposes setter methods for each dependency, and the IoC container uses these setter methods to inject the dependencies after creating an instance of the class.
Setter injection allows for flexibility as dependencies can be changed or updated dynamically at runtime. It also enables optional dependencies as setter methods can be called selectively.
  
###############################################################################################################################################
  Q7.What are Spring Beans?
 In the Spring Framework, a bean is an object that is managed by the Spring IoC container.
  It is an instance of a class that is created, configured, and managed by the container.
  Beans in Spring represent the fundamental building blocks of an application and can be used to encapsulate the application's business logic, data, or infrastructure-related functionality.
  Beans are defined in the Spring configuration file and are instantiated, assembled, and managed by the Spring container.
  
###############################################################################################################################################
Q8.What are the bean scopes available in Spring?

Spring provides several bean scopes that define the lifecycle and visibility of a bean instance. The available bean scopes in Spring are:

Singleton: The default scope. A single bean instance is created and shared across the entire application context.
Prototype: A new bean instance is created every time it is requested. Multiple instances of the bean can coexist within the application context.
Request: A new bean instance is created for each HTTP request in a web application. The bean instance is destroyed once the request is completed.
Session: A new bean instance is created for each user session in a web application. The bean instance is destroyed when the user session ends.
Global Session: Similar to the session scope, but used in a Portlet context for global sessions.
  
###############################################################################################################################################
Q9.What is Autowiring and name the different modes of it?

Autowiring is a feature of the Spring Framework that automatically injects dependencies into beans. 
  It eliminates the need for explicit configuration of dependencies in the Spring configuration file.
  Autowiring can be used to wire beans together based on their types, eliminating the need for manual wiring using <property> or <constructor-arg> tags. The different modes of autowiring in Spring are:

byName: Autowiring is done by matching the bean's name with the property name in the target bean.
byType: Autowiring is done by matching the bean's type with the property type in the target bean.
constructor: Autowiring is done by matching the constructor arguments of the target bean with the available beans in the context.
no: Autowiring is disabled, and dependencies must be explicitly configured using <property> or <constructor-arg> tags.
  
###############################################################################################################################################
Q10.Explain Bean life cycle in Spring Bean Factory Container.

Instantiation: The container creates an instance of the bean using the bean's class and any defined constructor arguments.
Populate properties: The container sets the values of the bean's properties and dependencies using the configured property values or autowiring.
BeanNameAware and BeanFactoryAware: If implemented, the bean is provided with the name of the bean and the BeanFactory instance.
InitializingBean and custom initialization methods: The bean may implement InitializingBean interface or define a custom initialization method, which is called after property population.
BeanPostProcessor: Any registered BeanPostProcessors are called for further initialization or modification of the bean.
Ready for use: The bean is now fully initialized and available for use.
DisposableBean and custom destruction methods: If implemented, the bean may implement DisposableBean interface or define a custom destruction method, which is called before the bean is destroyed.
Destruction: The container destroys the bean, releasing any resources held by the bean.
During the bean lifecycle, the Spring container manages the initialization, configuration, and destruction of the beans, allowing for customization and extension of the bean's behavior.

